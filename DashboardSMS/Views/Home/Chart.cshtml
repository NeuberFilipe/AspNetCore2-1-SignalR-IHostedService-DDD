@{
    Layout = "_Layout";
}

<!-- Content Header (Page header) -->
<section class="content">
    <div class="container-fluid">
        <!-- row -->
        <!-- Content Header (Page header) -->
        <section class="content">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-md-12">
                        <!-- DONUT CHART -->
                        <div class="card card-info">
                            <div class="card-header">
                                <h3 class="card-title">Processamento Real-Time (Dia)</h3>
                                <div class="card-tools">
                                    <button type="button" class="btn btn-tool" data-widget="collapse">
                                        <i class="fa fa-minus"></i>
                                    </button>
                                </div>
                            </div>
                            <div class="card-body">
                                <canvas id="pieChart" style="height:250px" data-readonly="true" readonly="readonly"></canvas>
                                <div id="js-legend" class="chart-legend"></div>
                            </div>
                            <!-- /.card-body -->
                        </div>
                        <!-- /.card -->
                    </div>

                </div>

                <div class="row">
                    <!-- /.col (LEFT) -->
                    <div class="col-md-12">
                        <!-- BAR CHART -->
                        <div class="card card-success">
                            <div class="card-header">
                                <h3 class="card-title">Acompanhamento semanal</h3>
                                <div class="card-tools">
                                    <button type="button" class="btn btn-tool" data-widget="collapse">
                                        <i class="fa fa-minus"></i>
                                    </button>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="chart">
                                    <canvas id="barChart" style="height:250px" data-readonly="true" readonly="readonly"></canvas>
                                    <div id="legend"></div>
                                </div>
                            </div>
                            <!-- /.card-body -->
                        </div>
                        <!-- /.card -->
                    </div>
                    <!-- /.col (RIGHT) -->
                </div>

                <section class="content">
                    <div class="container-fluid">
                        <!-- row -->
                        <div class="row">
                            <div class="col-12">
                                <div class="card">
                                    <div class="card-header">
                                        <h3 class="card-title">
                                            <i class="fa fa-bar-chart-o"></i>
                                            Processamento Real-Time (Dia/Status)
                                        </h3>
                                        <div class="card-tools">
                                            <button type="button" class="btn btn-tool" data-widget="collapse">
                                                <i class="fa fa-minus"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <!-- /.card-header -->
                                    <div class="card-body" id="card-body-knob">
                                        <div class="row">
                                            <!-- ./col Enviar -->
                                            <div class="col-6 col-md-3 text-center">
                                                <input type="text" class="knob" id="knob-Enviar" value="0" data-skin="tron" data-thickness="0.1"
                                                       data-angleArc="250" data-angleOffset="-125" data-width="120" data-height="120"
                                                       data-fgColor="#00a65a" data-readonly="true" readonly="readonly">
                                                <div class="knob-label">Enviar</div>
                                            </div>

                                            <!-- ./col Respondido -->
                                            <div class="col-6 col-md-3 text-center">
                                                <input type="text" class="knob" id="knob-Respondido" value="0" data-skin="tron" data-thickness="0.1"
                                                       data-angleArc="250" data-angleOffset="-125" data-width="120" data-height="120"
                                                       data-fgColor="#00a65a" data-readonly="true" readonly="readonly">
                                                <div class="knob-label">Respondido</div>
                                            </div>

                                            <!-- ./col RespostaLida -->
                                            <div class="col-6 col-md-3 text-center">
                                                <input type="text" class="knob" id="knob-RespostaLida" value="0" data-skin="tron" data-thickness="0.1"
                                                       data-angleArc="250" data-angleOffset="-125" data-width="120" data-height="120"
                                                       data-fgColor="#00a65a" data-readonly="true" readonly="readonly">
                                                <div class="knob-label">RespostaLida</div>
                                            </div>

                                            <!-- ./col Entregue -->
                                            <div class="col-6 col-md-3 text-center">
                                                <input type="text" class="knob" id="knob-Entregue" value="0" data-skin="tron" data-thickness="0.1"
                                                       data-angleArc="250" data-angleOffset="-125" data-width="120" data-height="120"
                                                       data-fgColor="#00a65a" data-readonly="true" readonly="readonly">
                                                <div class="knob-label">Entregue</div>
                                            </div>
                                        </div>

                                        <div class="row">
                                            <!-- ./col Pendente -->
                                            <div class="col-6 col-md-3 text-center">
                                                <input type="text" class="knob" id="knob-Pendente" value="0" data-skin="tron" data-thickness="0.1"
                                                       data-angleArc="250" data-angleOffset="-125" data-width="120" data-height="120"
                                                       data-fgColor="#ffa31a" data-readonly="true" readonly="readonly">
                                                <div class="knob-label">Pendente</div>
                                            </div>

                                            <!-- ./col Reenviar -->
                                            <div class="col-6 col-md-3 text-center">
                                                <input type="text" class="knob" id="knob-Reenviar" value="0" data-skin="tron" data-thickness="0.1"
                                                       data-angleArc="250" data-angleOffset="-125" data-width="120" data-height="120"
                                                       data-fgColor="#ffa31a" data-readonly="true" readonly="readonly">
                                                <div class="knob-label">Reenviar</div>
                                            </div>


                                            <!-- ./col RespostaIncorreta -->
                                            <div class="col-6 col-md-3 text-center">
                                                <input type="text" class="knob" id="knob-RespostaIncorreta" value="0" data-skin="tron" data-thickness="0.1"
                                                       data-angleArc="250" data-angleOffset="-125" data-width="120" data-height="120"
                                                       data-fgColor="#ffa31a" data-readonly="true" readonly="readonly">
                                                <div class="knob-label">RespostaIncorreta</div>
                                            </div>
                                            <!-- ./col Reenviado -->
                                            <div class="col-6 col-md-3 text-center">
                                                <input type="text" class="knob" id="knob-Reenviado" value="0" data-skin="tron" data-thickness="0.1"
                                                       data-angleArc="250" data-angleOffset="-125" data-width="120" data-height="120"
                                                       data-fgColor="#ffa31a" data-readonly="true" readonly="readonly">
                                                <div class="knob-label">Reenviado</div>
                                            </div>
                                        </div>

                                        <div class="row">
                                            <!-- ./col Parado -->
                                            <div class="col-6 col-md-3 text-center">
                                                <input type="text" class="knob" id="knob-Parado" value="0" data-skin="tron" data-thickness="0.1"
                                                       data-angleArc="250" data-angleOffset="-125" data-width="120" data-height="120"
                                                       data-fgColor="#f56954" data-readonly="true" readonly="readonly">
                                                <div class="knob-label">Parado</div>
                                            </div>

                                            <!-- ./col Falha -->
                                            <div class="col-6 col-md-3 text-center">
                                                <input type="text" class="knob" id="knob-Falha" value="0" data-skin="tron" data-thickness="0.1"
                                                       data-angleArc="250" data-angleOffset="-125" data-width="120" data-height="120"
                                                       data-fgColor="#f56954" data-readonly="true" readonly="readonly">
                                                <div class="knob-label">Falha</div>
                                            </div>
                                            <!-- ./col Indisponivel -->
                                            <div class="col-6 col-md-3 text-center">
                                                <input type="text" class="knob" id="knob-Indisponivel" value="0" data-skin="tron" data-thickness="0.1"
                                                       data-angleArc="250" data-angleOffset="-125" data-width="120" data-height="120"
                                                       data-fgColor="#f56954" data-readonly="true" readonly="readonly">
                                                <div class="knob-label">Indisponivel</div>
                                            </div>
                                            <!-- ./col NaoEntregavel -->
                                            <div class="col-6 col-md-3 text-center">
                                                <input type="text" class="knob" id="knob-NaoEntregavel" value="0" data-skin="tron" data-thickness="0.1"
                                                       data-angleArc="250" data-angleOffset="-125" data-width="120" data-height="120"
                                                       data-fgColor="#f56954" data-readonly="true" readonly="readonly">
                                                <div class="knob-label">NaoEntregavel</div>
                                            </div>
                                        </div>

                                        <div class="row">
                                            <!-- ./col Expirado -->
                                            <div class="col-6 col-md-3 text-center">
                                                <input type="text" class="knob" id="knob-Expirado" value="0" data-skin="tron" data-thickness="0.1"
                                                       data-angleArc="250" data-angleOffset="-125" data-width="120" data-height="120"
                                                       data-fgColor="#f56954" data-readonly="true" readonly="readonly">
                                                <div class="knob-label">Expirado</div>
                                            </div>
                                            <!-- ./col Rejeitado -->
                                            <div class="col-6 col-md-3 text-center">
                                                <input type="text" class="knob" id="knob-Rejeitado" value="0" data-skin="tron" data-thickness="0.1"
                                                       data-angleArc="250" data-angleOffset="-125" data-width="120" data-height="120"
                                                       data-fgColor="#f56954" data-readonly="true" readonly="readonly">
                                                <div class="knob-label">Rejeitado</div>
                                            </div>
                                        </div>
                                        <!-- /.row -->
                                    </div>
                                    <!-- /.card-body -->
                                </div>
                                <!-- /.card -->
                            </div>
                            <!-- /.col -->
                        </div>
                        <!-- /.row -->
                    </div><!-- /.container-fluid -->
                </section>
                <!-- /.row -->
            </div><!-- /.container-fluid -->
        </section>   <!-- /.row -->
        <!-- /.row -->
    </div><!-- /.container-fluid -->
</section>

<script src="~/plugins/jquery/jquery.min.js"></script>
<!-- Bootstrap 4 -->
<script src="~/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
<!-- SlimScroll -->
<script src="~/plugins/slimScroll/jquery.slimscroll.min.js"></script>
<!-- FastClick -->
<script src="~/plugins/fastclick/fastclick.js"></script>
<!-- AdminLTE App -->
<script src="~/dist/js/adminlte.min.js"></script>
<!-- AdminLTE for demo purposes -->
<script src="~/dist/js/demo.js"></script>
<!-- ./wrapper -->
<!-- jQuery -->
<script src="~/plugins/jquery/jquery.min.js"></script>
<!-- Bootstrap 4 -->
<script src="~/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
<!-- ChartJS 1.0.1 -->
<script src="~/plugins/chartjs-old/Chart.js"></script>
<!-- jQuery Knob -->
<script src="../../plugins/knob/jquery.knob.js"></script>
<!-- Sparkline -->
<script src="../../plugins/sparkline/jquery.sparkline.min.js"></script>

<script src="../lib/signalr/signalr.js"></script>
<script src="../lib/signalr/signalr.js"></script>
<script type="text/javascript">

            $(document).ready(function () {
                setInterval(loadGraphs(), 1000);
                setInterval(loadPier(), 1000);
                setInterval(loadBar(), 1000);

                //$(".card-body-knob").hide();

                $("#knob-sucesso").click(function () {
                    $("login").modal('show');
                });

                $("#HidebtnModal").click(function () {
                    $("login").modal('hide');
                });
            })

            function loadPier() {
                var connection = new signalR.HubConnectionBuilder()
                    .withUrl("/monitoramentos")
                    .build();


                connection.start().then(function () {
                });

                connection.on("UpdatePier", function (pierData) {
                    var pieChartCanvas = $('#pieChart').get(0).getContext('2d')
                    var pieChart = new Chart(pieChartCanvas)

                    var pieOptions = {
                        //Boolean - Whether we should show a stroke on each segment
                        segmentShowStroke: true,
                        //String - The colour of each segment stroke
                        segmentStrokeColor: '#fff',
                        //Number - The width of each segment stroke
                        segmentStrokeWidth: 1,
                        //Number - The percentage of the chart that we cut out of the middle
                        percentageInnerCutout: 50, // This is 0 for Pie charts
                        //Number - Amount of animation steps
                        animationSteps: 100,
                        //String - Animation easing effect
                        animationEasing: 'easeOutBounce',
                        //Boolean - Whether we animate the rotation of the Doughnut
                        animateRotate: false,
                        //Boolean - Whether we animate scaling the Doughnut from the centre
                        animateScale: false,
                        //Boolean - whether to make the chart responsive to window resizing
                        responsive: true,
                        // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
                        maintainAspectRatio: true,
                        //String - A legend template;
                        legendTemplate: '<ul>' + '<% for (var i=0; i<segments.length; i++) { %>' + '<li>' + '<span style=\"height:10px!important;width:10px!important;background-color:<%=segments[i].fillColor%>\">&nbsp; &nbsp; &nbsp;</span>' +  '&nbsp;<% if (segments[i].label) { %><%= segments[i].label %><% } %>' + '</li>' + '<% } %>' + '</ul>'
                    }
                    //Create pie or douhnut chart
                    // You can switch between pie and douhnut using the method below.
                    var myChart = pieChart.Doughnut(pierData, pieOptions);

                    document.getElementById("js-legend").innerHTML = myChart.generateLegend();
                });
            }

            function loadGraphs() {
                var connection = new signalR.HubConnectionBuilder()
                    .withUrl("/monitoramentos")
                    .build();


                connection.start().then(function () {
                });

                connection.on("UpdateChart", function (name, value, color) {
                    $(name).trigger(
                        'configure',
                        {
                            "fgColor": color,
                            "inputColor": color,
                        }
                    )
                    $(name).val(value);
                });
            }

            function loadBar() {
                var connection = new signalR.HubConnectionBuilder()
                    .withUrl("/monitoramentos")
                    .build();

                connection.start().then(function () {
                });

                connection.on("UpdateBar", function (barData) {
                    var areaChartData = {
                        labels: ['Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado'],
                        datasets: barData
                    }

                    var barChartCanvas = $('#barChart').get(0).getContext('2d')
                    var barChart = new Chart(barChartCanvas)
                    var barChartData = areaChartData
                    barChartData.datasets[1].fillColor = '#00a65a'
                    barChartData.datasets[1].strokeColor = '#00a65a'
                    barChartData.datasets[1].pointColor = '#00a65a'
                    var barChartOptions = {
                        //Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value
                        scaleBeginAtZero: true,
                        //Boolean - Whether grid lines are shown across the chart
                        scaleShowGridLines: true,
                        //String - Colour of the grid lines
                        scaleGridLineColor: 'rgba(0,0,0,.05)',
                        //Number - Width of the grid lines
                        scaleGridLineWidth: 10,
                        //Boolean - Whether to show horizontal lines (except X axis)
                        scaleShowHorizontalLines: true,

                        animationEnabled: false,
                        //Boolean - Whether to show vertical lines (except Y axis)
                        scaleShowVerticalLines: true,
                        //Boolean - If there is a stroke on each bar
                        barShowStroke: true,
                        //Number - Pixel width of the bar stroke
                        barStrokeWidth: 1,
                        //Number - Spacing between each of the X value sets
                        barValueSpacing: 1,
                        //Number - Spacing between data sets within X values
                        barDatasetSpacing: 8,

                        displayLegend: true,
                        //String - A legend template
                        legendTemplate: '<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++) {%><li><span style=\"height:10px!important;width:10px!important;background-color:<%=datasets[i].fillColor%>\">&nbsp; &nbsp; &nbsp;</span>&nbsp;<% if (datasets[i].label) { %><%= datasets[i].label %><% } %></li><%}%></ul>',
                        //Boolean - whether to make the chart responsive
                        responsive: true,
                        maintainAspectRatio: true
                    }

                    barChartOptions.datasetFill = false
                    var mychart = barChart.Bar(barChartData, barChartOptions);
                    //document.getElementById("js-legend").innerHTML = mychart.generateLegend();
                    mychart.options.tooltipTemplate = '<ul>' + '<% for (var i=0; i<datasets.length; i++) { %>' + '<li>' + '<span style=\"height:10px!important;width:10px!important;background-color:<%=datasets[i].fillColor%>\">&nbsp; &nbsp; &nbsp;</span>' + '&nbsp;<% if (datasets[i].label) { %><%= datasets[i].label %><% } %>' + '</li>' + '<% } %>' + '</ul>' ;
                    //'<li>' + '<span style=\"height:10px!important;width:10px!important;background-color:<%=datasets[i].fillColor%>\">&nbsp; &nbsp; &nbsp;</span>' + '&nbsp;<% if (datasets[i].label) { %><%= datasets[i].label %><% } %>' + '</li>' + '<% } %>'
                    document.getElementById("legend").innerHTML = mychart.generateLegend();
                });
            }


        $(function () {
        /* ChartJS
        * -------
        * Here we will create a few charts using ChartJS
        */

        //-------------
        //- PIE CHART -
        //-------------
        // Get context with jQuery - using jQuery's .get() method.
        var pieChartCanvas = $('#pieChart').get(0).getContext('2d')
        var pieChart = new Chart(pieChartCanvas)
        var PieData = [
        {
        value: 0,
        color: '#f56954',
        highlight: '#f56954',
        label: 'Erros'

        },
        {
        value: 0,
        color: '#00a65a',
        highlight: '#00a65a',
        label: 'Sucesso'
        },
        {
        value: 0,
        color: '#f39c12',
        highlight: '#f39c12',
        label: 'Alerta'
        },
        {
        value: 0,
        color: '#d2d6de',
        highlight: '#d2d6de',
        label: 'Perda de Comunicação'
        }
        ]
        var pieOptions = {
        //Boolean - Whether we should show a stroke on each segment
        segmentShowStroke: true,
        //String - The colour of each segment stroke
        segmentStrokeColor: '#fff',
        //Number - The width of each segment stroke
        segmentStrokeWidth: 2,
        //Number - The percentage of the chart that we cut out of the middle
        percentageInnerCutout: 50, // This is 0 for Pie charts
        //Number - Amount of animation steps
        animationSteps: 100,
        //String - Animation easing effect
        animationEasing: 'easeOutBounce',
        //Boolean - Whether we animate the rotation of the Doughnut
        animateRotate: false,
        //Boolean - Whether we animate scaling the Doughnut from the centre
        animateScale: true,
        //Boolean - whether to make the chart responsive to window resizing
        responsive: true,
        // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
        maintainAspectRatio: false,
        //String - A legend template
        legendTemplate: '<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<segments.length; i++){%><li><span style="background-color:<%=segments[i].fillColor%>"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>'
        }
        //Create pie or douhnut chart
        // You can switch between pie and douhnut using the method below.
        pieChart.Doughnut(PieData, pieOptions)
        })

        $(function () {
        /* jQueryKnob */
        $('.knob').knob({

        draw: function () {

        // "tron" case
        if (this.$.data('skin') == 'tron') {

        var a = this.angle(this.cv)  // Angle
        ,
        sa = this.startAngle          // Previous start angle
        ,
        sat = this.startAngle         // Start angle
        ,
        ea                            // Previous end angle
        ,
        eat = sat + a                 // End angle
        ,
        r = true

        this.g.lineWidth = this.lineWidth

        this.o.cursor
        && (sat = eat - 0.3)
        && (eat = eat + 0.3)

        if (this.o.displayPrevious) {
        ea = this.startAngle + this.angle(this.value)
        this.o.cursor
        && (sa = ea - 0.3)
        && (ea = ea + 0.3)
        this.g.beginPath()
        this.g.strokeStyle = this.previousColor
        this.g.arc(this.xy, this.xy, this.radius - this.lineWidth, sa, ea, false)
        this.g.stroke()
        }

        this.g.beginPath()
        this.g.strokeStyle = r ? this.o.fgColor : this.fgColor
        this.g.arc(this.xy, this.xy, this.radius - this.lineWidth, sat, eat, false)
        this.g.stroke()

        this.g.lineWidth = 2
        this.g.beginPath()
        this.g.strokeStyle = this.o.fgColor
        this.g.arc(this.xy, this.xy, this.radius - this.lineWidth + 1 + this.lineWidth * 2 / 3, 0, 2 * Math.PI, false)
        this.g.stroke()
        return false
        }
        }
        })

        /* END JQUERY KNOB */

        //INITIALIZE SPARKLINE CHARTS
        $('.sparkline').each(function () {
        var $this = $(this)
        $this.sparkline('html', $this.data())
        })

        /* SPARKLINE DOCUMENTATION EXAMPLES http://omnipotent.net/jquery.sparkline/#s-about */
        drawDocSparklines()
        drawMouseSpeedDemo()

        })

        function drawDocSparklines() {

        // Bar + line composite charts
        $('#compositebar').sparkline('html', {
        type: 'bar',
        barColor: '#aaf'
        })
        $('#compositebar').sparkline([4, 1, 5, 7, 9, 9, 8, 7, 6, 6, 4, 7, 8, 4, 3, 2, 2, 5, 6, 7],
        {
        composite: true,
        fillColor: false,
        lineColor: 'red'
        })


        // Line charts taking their values from the tag
        $('.sparkline-1').sparkline()

        // Larger line charts for the docs
        $('.largeline').sparkline('html',
        {
        type: 'line',
        height: '2.5em',
        width: '4em'
        })

        // Customized line chart
        $('#linecustom').sparkline('html',
        {
        height: '1.5em',
        width: '8em',
        lineColor: '#f00',
        fillColor: '#ffa',
        minSpotColor: false,
        maxSpotColor: false,
        spotColor: '#77f',
        spotRadius: 3
        })

        // Bar charts using inline values
        $('.sparkbar').sparkline('html', { type: 'bar' })

        $('.barformat').sparkline([1, 3, 5, 3, 8], {
        type: 'bar',
        tooltipFormat: '{{value:levels}} - {{value}}',
        tooltipValueLookups: {
        levels: $.range_map({
        ':2': 'Low',
        '3:6': 'Medium',
        '7:': 'High'
        })
        }
        })

        // Tri-state charts using inline values
        $('.sparktristate').sparkline('html', { type: 'tristate' })
        $('.sparktristatecols').sparkline('html',
        {
        type: 'tristate',
        colorMap: {
        '-2': '#fa7',
        '2': '#44f'
        }
        })

        // Composite line charts, the second using values supplied via javascript
        $('#compositeline').sparkline('html', {
        fillColor: false,
        changeRangeMin: 0,
        chartRangeMax: 10
        })
        $('#compositeline').sparkline([4, 1, 5, 7, 9, 9, 8, 7, 6, 6, 4, 7, 8, 4, 3, 2, 2, 5, 6, 7],
        {
        composite: true,
        fillColor: false,
        lineColor: 'red',
        changeRangeMin: 0,
        chartRangeMax: 10
        })

        // Line charts with normal range marker
        $('#normalline').sparkline('html',
        {
        fillColor: false,
        normalRangeMin: -1,
        normalRangeMax: 8
        })
        $('#normalExample').sparkline('html',
        {
        fillColor: false,
        normalRangeMin: 80,
        normalRangeMax: 95,
        normalRangeColor: '#4f4'
        })

        // Discrete charts
        $('.discrete1').sparkline('html',
        {
        type: 'discrete',
        lineColor: 'blue',
        xwidth: 18
        })
        $('#discrete2').sparkline('html',
        {
        type: 'discrete',
        lineColor: 'blue',
        thresholdColor: 'red',
        thresholdValue: 4
        })

        // Bullet charts
        $('.sparkbullet').sparkline('html', { type: 'bullet' })

        // Pie charts
        $('.sparkpie').sparkline('html', {
        type: 'pie',
        height: '1.0em'
        })

        // Box plots
        $('.sparkboxplot').sparkline('html', { type: 'box' })
        $('.sparkboxplotraw').sparkline([1, 3, 5, 8, 10, 15, 18],
        {
        type: 'box',
        raw: true,
        showOutliers: true,
        target: 6
        })

        // Box plot with specific field order
        $('.boxfieldorder').sparkline('html', {
        type: 'box',
        tooltipFormatFieldlist: ['med', 'lq', 'uq'],
        tooltipFormatFieldlistKey: 'field'
        })

        // click event demo sparkline
        $('.clickdemo').sparkline()
        $('.clickdemo').bind('sparklineClick', function (ev) {
        var sparkline = ev.sparklines[0],
        region = sparkline.getCurrentRegionFields()
        value = region.y
        alert('Clicked on x=' + region.x + ' y=' + region.y)
        })

        // mouseover event demo sparkline
        $('.mouseoverdemo').sparkline()
        $('.mouseoverdemo').bind('sparklineRegionChange', function (ev) {
        var sparkline = ev.sparklines[0],
        region = sparkline.getCurrentRegionFields()
        value = region.y
        $('.mouseoverregion').text('x=' + region.x + ' y=' + region.y)
        }).bind('mouseleave', function () {
        $('.mouseoverregion').text('')
        })
        }

        /**
        ** Draw the little mouse speed animated graph
        ** This just attaches a handler to the mousemove event to see
        ** (roughly) how far the mouse has moved
        ** and then updates the display a couple of times a second via
        ** setTimeout()
        **/
        function drawMouseSpeedDemo() {
        var mrefreshinterval = 500 // update display every 500ms
        var lastmousex = -1
        var lastmousey = -1
        var lastmousetime
        var mousetravel = 0
        var mpoints = []
        var mpoints_max = 30
        $('html').mousemove(function (e) {
        var mousex = e.pageX
        var mousey = e.pageY
        if (lastmousex > -1) {
        mousetravel += Math.max(Math.abs(mousex - lastmousex), Math.abs(mousey - lastmousey))
        }
        lastmousex = mousex
        lastmousey = mousey
        })
        var mdraw = function () {
        var md = new Date()
        var timenow = md.getTime()
        if (lastmousetime && lastmousetime != timenow) {
        var pps = Math.round(mousetravel / (timenow - lastmousetime) * 1000)
        mpoints.push(pps)
        if (mpoints.length > mpoints_max) {
        mpoints.splice(0, 1)
        }
        mousetravel = 0
        $('#mousespeed').sparkline(mpoints, {
        width: mpoints.length * 2,
        tooltipSuffix: ' pixels per second'
        })
        }
        lastmousetime = timenow
        setTimeout(mdraw, mrefreshinterval)
        }
        // We could use setInterval instead, but I prefer to do it this way
        setTimeout(mdraw, mrefreshinterval);
        }
</script>